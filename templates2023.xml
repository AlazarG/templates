<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="javadoc" deleted="false" description="author name" enabled="true" id="org.eclipse.jdt.ui.templates.author" name="@author">@author ${user}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;b&gt;&lt;/b&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.b_tag" name="&lt;b&gt;">&lt;b&gt;${word_selection}${}&lt;/b&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag" name="&lt;code&gt;">&lt;code&gt;${word_selection}${}&lt;/code&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;i&gt;&lt;/i&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.i_tag" name="&lt;i&gt;">&lt;i&gt;${word_selection}${}&lt;/i&gt;${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;pre&gt;&lt;/pre&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.pre_tag" name="&lt;pre&gt;">&lt;pre&gt;${word_selection}${}&lt;/pre&gt;${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="add a listener to a Widget " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.addlistener" name="addlistener">${control:var(org.eclipse.swt.widgets.Widget)}.addListener(${type:link(
	SWT.Activate,
	SWT.Arm,
	SWT.Close,
	SWT.Collapse,
	SWT.Deactivate,
	SWT.DefaultSelection,
	SWT.Deiconify,
	SWT.Dispose,
	SWT.DragDetect,
	SWT.EraseItem,
	SWT.Expand,
	SWT.FocusIn,
	SWT.FocusOut,
	SWT.HardKeyDown,
	SWT.HardKeyUp,
	SWT.Help,
	SWT.Hide,
	SWT.Iconify,
	SWT.ImeComposition,
	SWT.KeyDown,
	SWT.KeyUp,
	SWT.MeasureItem,
	SWT.MenuDetect,
	SWT.Modify,
	SWT.MouseDoubleClick,
	SWT.MouseDown,
	SWT.MouseEnter,
	SWT.MouseExit,
	SWT.MouseHover,
	SWT.MouseMove,
	SWT.MouseUp,
	SWT.MouseWheel,
	SWT.Move,
	SWT.Paint,
	SWT.PaintItem,
	SWT.Resize,
	SWT.Selection,
	SWT.SetData,
	SWT.Settings,
	SWT.Show,
	SWT.Traverse,
	SWT.Verify)}, new ${listener:newType(org.eclipse.swt.widgets.Listener)}(){
	public void handleEvent(${event:newType(org.eclipse.swt.widgets.Event)} e) {
		${imp:import(org.eclipse.swt.SWT)}${cursor}				
	}
});</template><template autoinsert="true" context="java-members" deleted="false" description="junit after method" enabled="true" name="after">${:import (org.junit.After)}&#13;
@After&#13;
public void tearDown() {&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="java-members" deleted="false" description="junit after method" enabled="true" name="after">${:import (org.junit.After)}&#13;
@After&#13;
public void tearDown() {&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="java-members" deleted="false" description="junit afterclass method" enabled="true" name="afterclass">${:import (org.junit.AfterClass)}&#13;
@AfterClass&#13;
public static void oneTimeTearDown() {&#13;
    // one-time cleanup code&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="java-members" deleted="false" description="junit afterclass method" enabled="true" name="afterclass">${:import (org.junit.AfterClass)}&#13;
@AfterClass&#13;
public static void oneTimeTearDown() {&#13;
    // one-time cleanup code&#13;
    ${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="add an element to an array" enabled="true" id="org.eclipse.jdt.ui.templates.arrayadd" name="arrayadd">${array_type}[] ${result:newName(array)} = new ${array_type}[${array}.length + 1];
System.arraycopy(${array}, 0, ${result}, 0, ${array}.length);
${result}[${array}.length]= ${var};</template><template autoinsert="false" context="java-statements" deleted="false" description="merge two arrays into one" enabled="true" id="org.eclipse.jdt.ui.templates.arraymerge" name="arraymerge">${array_type}[] ${result:newName(array1)} = new ${array_type}[${array1:array}.length + ${array}.length];
System.arraycopy(${array1}, 0, ${result}, 0, ${array1}.length);
System.arraycopy(${array}, 0, ${result}, ${array1}.length, ${array}.length);</template><template autoinsert="true" context="java" deleted="false" description="Apache Copyright License embedded in Java Comments" enabled="true" id="org.springframework.ide.eclipse.boot.templates.license.apache" name="asl">
/*
 * Copyright ${year} the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</template><template autoinsert="true" context="java-members" deleted="false" description="junit before method" enabled="true" name="before">${:import (org.junit.Before)}&#13;
@Before&#13;
public void setUp() {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java-members" deleted="false" description="junit before method" enabled="true" name="before">${:import (org.junit.Before)}&#13;
@Before&#13;
public void setUp() {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java-members" deleted="false" description="junit beforeclass method" enabled="true" name="beforeclass">${:import (org.junit.BeforeClass)}&#13;
@BeforeClass&#13;
public static void oneTimeSetUp() {&#13;
    // one-time initialization code&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="java-members" deleted="false" description="junit beforeclass method" enabled="true" name="beforeclass">${:import (org.junit.BeforeClass)}&#13;
@BeforeClass&#13;
public static void oneTimeSetUp() {&#13;
    // one-time initialization code&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="postfix" deleted="false" description="Sets the cursor to the begin of the expression" enabled="true" id="org.eclipse.jdt.postfixcompletion.beg" name="beg">${}${inner_expression}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Browser" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.browser" name="Browser">${browserType:newType(org.eclipse.swt.browser.Browser)} ${browser:newName(org.eclipse.swt.browser.Browser)}= new ${browserType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.MOZILLA)});
${browser}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${browser}.setUrl(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Button" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.button" name="Button">${buttonType:newType(org.eclipse.swt.widgets.Button)} ${button:newName(org.eclipse.swt.widgets.Button)}= new ${buttonType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.PUSH, SWT.TOGGLE, SWT.RADIO, SWT.CHECK, SWT.FLAT)});
${button}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${button}.setText(${word_selection}${});
${button}.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				${listener:link('')}
			}
		});
${imp:import(org.eclipse.swt.SWT, org.eclipse.swt.events.SelectionAdapter, org.eclipse.swt.events.SelectionEvent)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="dynamic cast" enabled="true" id="org.eclipse.jdt.ui.templates.cast" name="cast">${type} ${new_name} = (${type}) ${name};</template><template autoinsert="true" context="postfix" deleted="false" description="Casts the expression to a new type" enabled="true" id="org.eclipse.jdt.postfixcompletion.cast" name="cast">((${})${inner_expression})${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="catch block" enabled="true" id="org.eclipse.jdt.ui.templates.catch" name="catch">catch (${Exception} ${exception_variable_name}) {
	${cursor}// ${todo}: handle exception
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Combo" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.combo" name="Combo">${comboType:newType(org.eclipse.swt.widgets.Combo)} ${combo:newName(org.eclipse.swt.widgets.Combo)}= new ${comboType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.DROP_DOWN, 'SWT.DROP_DOWN | SWT.READ_ONLY')});
${combo}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(true, false)}, ${vex:link(false, true)}));
${combo}.setItems(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Code Section" enabled="true" name="comment-block">//--------------------------------------------------------------&#13;
//                       ${title}&#13;
//--------------------------------------------------------------&#13;
${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Composite with GridLayout" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.gridcomposite" name="Composite">${compositeType:newType(org.eclipse.swt.widgets.Composite)} ${composite:newName(org.eclipse.swt.widgets.Composite)}= new ${compositeType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.BORDER)});
${composite}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${composite}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="const">private static final ${type} ${name} = new ${type} ${cursor};</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="const">private static final ${type} ${name} = new ${type} ${cursor};</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a new private constant" enabled="true" id="org.eclipse.jdt.postfixcompletion.constpriv" name="constpriv">${n:newField(i, false, true, true, true)}${i:inner_expression(novalue)}${cursor}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a new public constant" enabled="true" id="org.eclipse.jdt.postfixcompletion.constpub" name="constpub">${n:newField(i, true, true, true, true)}${i:inner_expression(novalue)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new DateTime" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.datetime" name="DateTime">${dateType:newType(org.eclipse.swt.widgets.DateTime)} ${dateTime:newName(org.eclipse.swt.widgets.DateTime)}= new ${dateType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.CALENDAR | SWT.SHORT', 'SWT.CALENDAR | SWT.MEDIUM', 'SWT.CALENDAR | SWT.LONG', 'SWT.TIME | SWT.SHORT', 'SWT.TIME | SWT.MEDIUM', 'SWT.TIME | SWT.LONG', 'SWT.DATE | SWT.SHORT', 'SWT.DATE | SWT.MEDIUM', 'SWT.DATE | SWT.LONG')});
${dateTime}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="boot-members" deleted="false" description="DeleteMapping method" enabled="true" id="org.springframework.ide.eclipse.boot.templates.DeleteMapping" name="DeleteMapping method">${x:import(org.springframework.web.bind.annotation.DeleteMapping, org.springframework.web.bind.annotation.PathVariable)}@DeleteMapping(value="${path}/{${id}}")
public ${r:link(String)} ${deleteMethodName}(@PathVariable ${pv:link(String,int,long)} ${id}) {
	//TODO: process DELETE request
	${cursor}
	return "${Success}";
}
</template><template autoinsert="true" context="java" deleted="false" description="Singleton design pattern" enabled="true" name="design-singleton">/**&#13;
 * static Singleton instance.&#13;
 */&#13;
private static volatile ${enclosing_type} instance;&#13;
&#13;
/**&#13;
 * Private constructor for singleton.&#13;
 */&#13;
private ${enclosing_type}() {&#13;
}&#13;
&#13;
/**&#13;
 * Return a singleton instance of ${enclosing_type}.&#13;
 */&#13;
public static ${enclosing_type} getInstance() {&#13;
    // Double lock for thread safety.&#13;
    if (instance == null) {&#13;
        synchronized(${enclosing_type}.class){&#13;
            if (instance == null) {&#13;
                instance = new ${enclosing_type}();&#13;
            }&#13;
        }&#13;
    }&#13;
    return instance;&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="do while statement" enabled="true" id="org.eclipse.jdt.ui.templates.do" name="do">do {
	${line_selection}${cursor}
} while (${condition:var(boolean)});</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito doAnswer(answer).when(mock).call() construct" enabled="true" name="doAnswer">${a:importStatic(org.mockito.Mockito.doAnswer)}${b:import(org.mockito.stubbing.Answer, org.mockito.invocation.InvocationOnMock, java.lang.Throwable)}doAnswer( new Answer&lt;${T}&gt;() {&#13;
	public ${T} answer( InvocationOnMock invocation ) throws Throwable {&#13;
		${cursor}&#13;
		return null;&#13;
	}&#13;
} ).when( ${mock} ).${call};</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito doAnswer(answer).when(mock).call() construct that manipulates invocation argument" enabled="true" name="doAnswerOnArgument">${a:importStatic(org.mockito.Mockito.doAnswer)}${b:import(org.mockito.stubbing.Answer, org.mockito.invocation.InvocationOnMock, java.lang.Throwable)}doAnswer( new Answer&lt;${T}&gt;() {&#13;
	public ${T} answer( InvocationOnMock invocation ) throws Throwable {&#13;
		${ArgType} ${argument} = ( ${ArgType} )invocation.getArguments()[ ${i} ];&#13;
		${cursor}&#13;
		return null;&#13;
	}&#13;
} ).when( ${mock} ).${call};</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito doReturn(value).when(mock).call() construct" enabled="true" name="doReturn">${:importStatic(org.mockito.Mockito.doReturn)}doReturn( ${value} ).when( ${mock} ).${call};</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito doThrow(throwable).when(mock).call() construct" enabled="true" name="doThrow">${:importStatic(org.mockito.Mockito.doThrow)}doThrow( ${throwable} ).when( ${mock} ).${call};</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a do-while loop" enabled="true" id="org.eclipse.jdt.postfixcompletion.dowhile" name="dowhile">do {&#13;
	${cursor}&#13;
} while (${i:inner_expression(boolean)});</template><template autoinsert="true" context="boot-members" deleted="false" description="Declare a @Rule ExpectedException field [test]" enabled="true" id="org.springframework.ide.eclipse.boot.templates.expectedexception.decl" name="eerule">
${:import(org.junit.Rule,org.junit.rules.ExpectedException)}
@Rule
ExpectedException thrown = ExpectedException.none();
</template><template autoinsert="true" context="boot-statements" deleted="false" description="Add an Exception to an ExpectedException rule [test]" enabled="true" id="org.springframework.ide.eclipse.boot.templates.expectedexception.use" name="eerule">
${thrown:field(org.junit.rules.ExpectedException)}.expect(${Exception}.class);
${thrown:field(org.junit.rules.ExpectedException)}.expectMessage("${cursor}");
</template><template autoinsert="false" context="java-statements" deleted="false" description="else block" enabled="true" id="org.eclipse.jdt.ui.templates.else" name="else">else {
	${cursor}
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a negated if statement" enabled="true" id="org.eclipse.jdt.postfixcompletion.else" name="else">if (!${i:inner_expression(boolean)}${}) {&#13;
	${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="else if block" enabled="true" id="org.eclipse.jdt.ui.templates.elseif" name="elseif">else if (${condition:var(boolean)}) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="Custom Exception" enabled="true" name="exception-custom">/**&#13;
 * ${cursor}TODO Auto-generated Exception&#13;
 */&#13;
public class ${Name}Exception extends Exception {&#13;
    /**&#13;
     * TODO Auto-generated Default Serial Version UID&#13;
     */&#13;
    private static final long serialVersionUID = 1L;    &#13;
&#13;
    /**&#13;
     * @see Exception#Exception()&#13;
     */&#13;
    public ${Name}Exception() {&#13;
        super();&#13;
    }&#13;
&#13;
    /**&#13;
     * @see Exception#Exception(String) &#13;
     */&#13;
    public ${Name}Exception(String message) {&#13;
        super(message);         &#13;
    }&#13;
&#13;
    /**&#13;
     * @see Exception#Exception(Throwable)&#13;
     */&#13;
    public ${Name}Exception(Throwable cause) {&#13;
        super(cause);           &#13;
    }&#13;
&#13;
    /**&#13;
     * @see Exception#Exception(String, Throwable)&#13;
     */&#13;
    public ${Name}Exception(String message, Throwable cause) {&#13;
        super(message, cause);&#13;
    }&#13;
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="execute a runnable in the UI thread" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.execute" name="execute">${display:var(org.eclipse.swt.widgets.Display)}.${kind:link(syncExec, asyncExec)}(new ${runnable:newType(java.lang.Runnable)}(){
	public void run(){
		${cursor}
	}
});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ExpandBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.expandbar" name="ExpandBar">${type:newType(org.eclipse.swt.widgets.ExpandBar)} ${bar:newName(org.eclipse.swt.widgets.ExpandBar)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.V_SCROLL, SWT.NONE)});
${bar}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ExpandItem for an ExpandBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.expanditem" name="ExpandItem">${type:newType(org.eclipse.swt.widgets.ExpandItem)} ${item:newName(org.eclipse.swt.widgets.ExpandItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.ExpandBar)}, SWT.NONE);
${item}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}

${item}.setControl(${control});
${item}.setHeight(${control}.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);</template><template autoinsert="true" context="java" deleted="false" description="Insert JUnit Expected exception" enabled="true" name="expected exception">@Rule${imp:import(org.junit.rules.ExpectedException,org.junit.Rule)}
public ExpectedException thrown = ExpectedException.none();</template><template autoinsert="false" context="java-statements" deleted="false" description="$FALL-THROUGH$ marker" enabled="true" id="org.eclipse.jdt.ui.templates.fall-through" name="fall-through">//$$FALL-THROUGH$$</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;false&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_false" name="false">&lt;code&gt;false&lt;/code&gt;</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a new field" enabled="true" id="org.eclipse.jdt.postfixcompletion.field" name="field">${field:newField(i)} = ${i:inner_expression};${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="finally block" enabled="true" id="org.eclipse.jdt.ui.templates.finally" name="finally">finally {
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over array" enabled="true" id="org.eclipse.jdt.ui.templates.for_array" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${line_selection}${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over array with temporary variable" enabled="true" id="org.eclipse.jdt.ui.templates.for_temp" name="for">for (int ${index} = 0; ${index} &lt; ${array}.length; ${index}++) {
	${array_type} ${array_element} = ${array}[${index}];
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over collection" enabled="true" id="org.eclipse.jdt.ui.templates.for_collection" name="for">for (${iteratorType:newType(java.util.Iterator)} ${iterator} = ${collection}.iterator(); ${iterator}.hasNext(); ) {
	${type:elemType(collection)} ${name:newName(type)} = (${type}) ${iterator}.next();
	${cursor}
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a for statement" enabled="true" id="org.eclipse.jdt.postfixcompletion.for" name="for">for (${type:newActualType(i)} ${n:newName(i)} : ${i:inner_expression(java.util.Collection,array)}) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="java-statements" deleted="false" description="iterate over map" enabled="true" name="for">${:import(java.util.Map.Entry)}&#13;
for(Entry&lt;${key:argType(map,0)},${value:argType(map,1)}&gt; entry :&#13;
                    ${map:var(java.util.Map)}.entrySet()) {&#13;
    ${key} key = entry.getKey();&#13;
    ${value} value = entry.getValue();&#13;
    ${cursor}&#13;
}</template><template autoinsert="true" context="java-statements" deleted="false" description="iterate over map" enabled="true" name="for">${:import(java.util.Map.Entry)}&#13;
for(Entry&lt;${key:argType(map,0)},${value:argType(map,1)}&gt; entry :&#13;
                    ${map:var(java.util.Map)}.entrySet()) {&#13;
    ${key} key = entry.getKey();&#13;
    ${value} value = entry.getValue();&#13;
    ${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito ArgumentCaptor.forClass(Type.class) construct" enabled="true" name="forClass">${a:import(org.mockito.ArgumentCaptor)}ArgumentCaptor&lt;${Type}&gt; ${captor} = ${b:importStatic(org.mockito.ArgumentCaptor.forClass)}forClass( ${Type}.class );</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over an array or Iterable" enabled="true" id="org.eclipse.jdt.ui.templates.for_iterable" name="foreach">for (${iterable_type} ${iterable_element} : ${iterable}) {
	${cursor}
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a for statement which iterates over an array" enabled="true" id="org.eclipse.jdt.postfixcompletion.fori" name="fori">for (int ${index} = 0; i &lt; ${i:inner_expression(array)}.length; ${index}++) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates an indexed for statement which uses the given integer as upper bound" enabled="true" id="org.eclipse.jdt.postfixcompletion.foriub" name="foriub">for (int ${index} = 0; i &lt; ${i:inner_expression(int)}; ${index}++) {&#13;
	${cursor}&#13;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate over map" enabled="true" id="org.eclipse.jdt.ui.templates.for_map" name="formap">for (Map.Entry&lt;${keyType}, ${valType}&gt; ${entry}: ${map}.entrySet()) {
	${keyType} ${key} = ${entry}.getKey();
	${valType} ${val} = ${entry}.getValue();
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="Disable formatter with formatter:off/on tags" enabled="true" id="org.springframework.ide.eclipse.boot.templates.noformat" name="formatter-off">
// @formatter:off
${cursor} ${line_selection}
// @formatter:on
</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a for statement which iterates over an array in reverse order" enabled="true" id="org.eclipse.jdt.postfixcompletion.forr" name="forr">for (int ${index} = ${i:inner_expression(array)}.length - 1; i &gt;= 0; ${index}--) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates an indexed for statement which uses the given integer - 1 as starting value (counting backwards)" enabled="true" id="org.eclipse.jdt.postfixcompletion.forrlb" name="forrlb">for (int ${index} = ${i:inner_expression(int)} - 1; i &gt;= 0 ; ${index}--) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="boot-members" deleted="false" description="GetMapping method" enabled="true" id="org.springframework.ide.eclipse.boot.templates.GetMapping" name="GetMapping method">${x:import(org.springframework.web.bind.annotation.GetMapping, org.springframework.web.bind.annotation.RequestParam)}@GetMapping(value="${path}")
public ${SomeData} ${getMethodName}(@RequestParam ${String} ${param}) {
	return new ${SomeData}(${cursor});
}
</template><template autoinsert="false" context="swt-statements" deleted="false" description="new GridData for a Control" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.griddata" name="GridData">${gridData:newType(org.eclipse.swt.layout.GridData)} ${layoutData:newName(org.eclipse.swt.layout.GridData)} = new ${gridData}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(false, true)});
${layoutData}.widthHint= ${width:link(SWT.DEFAULT)};
${layoutData}.heightHint= ${height:link(SWT.DEFAULT)};
${parent:var(org.eclipse.swt.widgets.Control)}.setLayoutData(${layoutData});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="using GridDataFactory for a Control" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.griddatafactory" name="GridDataFactory">GridDataFactory.fillDefaults().grab(true, false).applyTo(${parent:var(org.eclipse.swt.widgets.Control)});
${imp:import(org.eclipse.jface.layout.GridDataFactory)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new GridLayout for a Composites" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.gridlayout" name="GridLayout">${gridLayout:newType(org.eclipse.swt.layout.GridLayout)} ${layout:newName(org.eclipse.swt.layout.GridLayout)} = new ${gridLayout}(${columns:link(1, 2, 3, 4, 5)}, ${width:link(false, true)});
${layout}.marginWidth = ${marginW:link(5, 0)};
${layout}.marginHeight = ${marginH:link(5, 0)};
${layout}.verticalSpacing = ${vSpacing:link(0, 5)};
${layout}.horizontalSpacing = ${hSpacing:link(0, 5)};
${parent:var(org.eclipse.swt.widgets.Composite)}.setLayout(${layout});
${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Group with GridLayout" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.group" name="Group">${groupType:newType(org.eclipse.swt.widgets.Group)} ${group:newName(org.eclipse.swt.widgets.Group)}= new ${groupType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.SHADOW_ETCHED_IN, SWT.SHADOW_ETCHED_OUT, SWT.SHADOW_IN, SWT.SHADOW_OUT, SWT.SHADOW_NONE)});
${group}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(false, true)}));
${group}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));
${group}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="if statement" enabled="true" id="org.eclipse.jdt.ui.templates.if" name="if">if (${condition:var(boolean)}) {
	${line_selection}${cursor}
}</template><template autoinsert="true" context="java-statements" deleted="false" description="if not null" enabled="true" name="if">if (${var} != null){&#13;
    ${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="if null" enabled="true" name="if">if (${var} == null){&#13;
	${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="if not null" enabled="true" name="if">if (${var} != null){&#13;
    ${cursor}&#13;
}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="if null" enabled="true" name="if">if (${var} == null){&#13;
	${cursor}&#13;
}&#13;
</template><template autoinsert="false" context="java-statements" deleted="false" description="if else statement" enabled="true" id="org.eclipse.jdt.ui.templates.ifelse" name="ifelse">if (${condition:var(boolean)}) {
	${cursor}
} else {
	
}</template><template autoinsert="false" context="java-statements" deleted="false" description="If not null" enabled="true" id="org.eclipse.jdt.ui.templates.ifnotnull" name="ifnotnull">
		if (${myvar:newName(variable)}!=null) {
		${cursor}
		}
	</template><template autoinsert="false" context="java-statements" deleted="false" description="if statement checking for null" enabled="true" id="org.eclipse.jdt.ui.templates.ifnull" name="ifNull">if (${name:var} == null) {
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="illarg">throw new IllegalArgumentException("Invalid ${var} " + ${var});  </template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="illarg">throw new IllegalArgumentException("Invalid ${var} " + ${var});  </template><template autoinsert="false" context="swt-statements" deleted="false" description="new Image" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.image" name="Image">${labelType:newType(org.eclipse.swt.widgets.Label)} ${image:newName(org.eclipse.swt.widgets.Label)}= new ${labelType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.BORDER)});
${image}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${image}.setImage(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="dynamic type test and cast" enabled="true" id="org.eclipse.jdt.ui.templates.instanceof" name="instanceof">if (${name:var} instanceof ${type}) {
	${type} ${new_name} = (${type})${name};
	${cursor}
}</template><template autoinsert="true" context="java" deleted="false" description="Lambda default interface" enabled="true" name="java8-default-interface">// Default methods&#13;
//interface InterfaceName {                         &#13;
//    default ReturnType methodName() {                      &#13;
//        implementation                                          &#13;
//    }                                                      &#13;
//}   &#13;
&#13;
interface ${enclosing_type}{&#13;
	default String describe() {&#13;
  	  return "fantastic";&#13;
	}&#13;
}</template><template autoinsert="false" context="java" deleted="false" description="" enabled="true" name="java8-effective-final-variables">//Effectively final variables&#13;
//Effectively final variable is a variable that doesn't change its value (a constant).&#13;
//Such variables can be referenced in lambdas without the need to explicitly mark them as "final":&#13;
// s is effectively final (not changed anywhere)&#13;
String s = "foo";&#13;
 &#13;
// s can be referenced in the lambda&#13;
Callable&lt;String&gt; callable = () -&gt; s;&#13;
 &#13;
callable.call();</template><template autoinsert="false" context="java" deleted="false" description="empty lambda with no parameter and no body" enabled="true" name="java8-lambda">// Lambda expressions&#13;
//(parameters) -&gt; expression                          &#13;
(int x, int y) -&gt; x + y&#13;
//(parameters) -&gt; statement                   &#13;
() -&gt; System.out.println("hi " + s)&#13;
//(parameters) -&gt; { statements }&#13;
(String s) -&gt; { int n = s.length(); return n; }&#13;
() -&gt; {${cursor}}&#13;
&#13;
// Method references&#13;
//Class::staticMethod&#13;
Arrays.sort(items, Util::compareItems);&#13;
//instance::instanceMethod                &#13;
items.forEach(System.out::print);&#13;
&#13;
&#13;
// takes a Long, returns a String&#13;
Function&lt;Long, String&gt; f = l -&gt; l.toString(); &#13;
&#13;
// takes nothing gives you Threads&#13;
Supplier&lt;Thread&gt; s =Thread::currentThread; &#13;
&#13;
// takes a string as the parameter &#13;
Consumer&lt;String&gt; c = System.out::println; &#13;
 &#13;
 &#13;
</template><template autoinsert="false" context="java" deleted="false" description="consuming lambda expression" enabled="true" name="java8-lambda-consumer">${lambdaParameter:newName(parameter)} -&gt; {${cursor}}</template><template autoinsert="false" context="java" deleted="false" description="function lambda expression" enabled="true" name="java8-lambda-function">${lambdaParameter:newName(input)} -&gt; {return ${result};}</template><template autoinsert="false" context="java" deleted="false" description="predicate lambda expression" enabled="true" name="java8-lambda-predicate">${lambdaParameter:newName(parameter)} -&gt; {return ${matches:var(boolean)};}</template><template autoinsert="false" context="java" deleted="false" description="supplying lambda expression" enabled="true" name="java8-lambda-supplier">() -&gt; { return ${cursor}}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="java8-optional">Optional&lt;User&gt; user = Optional.ofNullable(getUser(user)); &#13;
Optional&lt;Location&gt; location = user.map(u -&gt; getLocation(user));</template><template autoinsert="true" context="java" deleted="false" description="RESTful service one-liner with Java 8 and Rapidoid" enabled="true" name="java8-restful-one-liner">//RESTful service one-liner with Java 8 and Rapidoid&#13;
//Let's see why Java 8 is so great!&#13;
&#13;
//We can start an embedded Rapidoid web server and implement a simple RESTful service with 1 line of code (and Rapidoid):&#13;
On.get("/size").json((String msg) -&gt; msg.length());</template><template autoinsert="true" context="java" deleted="false" description="Calculate statistics (count, min, max, sum, average)" enabled="true" name="java8-stream-calc-stat">List&lt;Integer&gt; numbers = Arrays.asList(10, 3, 2, 5, 9, 4);&#13;
 &#13;
IntSummaryStatistics stats = numbers.stream().mapToInt(x -&gt; x).summaryStatistics();&#13;
 &#13;
stats.getCount();&#13;
stats.getMin();&#13;
stats.getMax();&#13;
stats.getSum();&#13;
stats.getAverage();</template><template autoinsert="true" context="java" deleted="false" description="When builder is used, the desired type should be additionally specified in the right part of the statement, " enabled="true" name="java8-stream-creation-builder">//When builder is used, the desired type should be additionally specified in the right part of the statement, &#13;
//otherwise the build() method will create an instance of the Stream&lt;Object&gt;:&#13;
&#13;
Stream&lt;String&gt; streamBuilder =&#13;
  Stream.&lt;String&gt;builder().add("a").add("b").add("c").build();</template><template autoinsert="true" context="java" deleted="false" description="We should use the empty() method in case of the creation of an empty stream:" enabled="true" name="java8-stream-creation-empty">Stream&lt;String&gt; streamEmpty = Stream.empty();&#13;
//We often use the empty() method upon creation to avoid returning null for streams with no element:&#13;
public Stream&lt;String&gt; streamOf(List&lt;String&gt; list) {&#13;
    return list == null || list.isEmpty() ? Stream.empty() : list.stream();&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="java8-stream-creation-generator">//The generate() method accepts a Supplier&lt;T&gt; for element generation. &#13;
//As the resulting stream is infinite, the developer should specify the desired size, or the generate() &#13;
//method will work until it reaches the memory limit:&#13;
&#13;
Stream&lt;String&gt; streamGenerated =&#13;
  Stream.generate(() -&gt; "element").limit(10);&#13;
//The code above creates a sequence of ten strings with the value “element.”&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Another way of creating an infinite stream is by using the iterate() method" enabled="true" name="java8-stream-creation-iterator">//Another way of creating an infinite stream is by using the iterate() method:&#13;
&#13;
Stream&lt;Integer&gt; streamIterated = Stream.iterate(40, n -&gt; n + 2).limit(20);&#13;
//The first element of the resulting stream is the first parameter of the iterate() method.&#13;
// When creating every following element, the specified function is applied to the previous element. &#13;
//In the example above the second element will be 42.&#13;
</template><template autoinsert="true" context="java" deleted="false" description="create streams out of three primitive types" enabled="true" name="java8-stream-creation-primitive">//Java 8 offers the possibility to create streams out of three primitive types: int, long and double.&#13;
// As Stream&lt;T&gt; is a generic interface, and there is no way to use primitives as a type parameter with generics, three new special interfaces were created: IntStream, LongStream, DoubleStream.&#13;
//Using the new interfaces alleviates unnecessary auto-boxing, which allows for increased productivity:&#13;
IntStream intStream = IntStream.range(1, 3);&#13;
LongStream longStream = LongStream.rangeClosed(1, 3);&#13;
</template><template autoinsert="true" context="java" deleted="false" description=" String as a source for creating a stream with the help of the chars() method of the String class" enabled="true" name="java8-stream-creation-strings">//We can also use String as a source for creating a stream with the help of the chars() method of the String class. &#13;
//Since there is no interface for CharStream in JDK, we use the IntStream to represent a stream of chars instead.&#13;
&#13;
IntStream streamOfChars = "abc".chars();&#13;
//The following example breaks a String into sub-strings according to specified RegEx:&#13;
&#13;
Stream&lt;String&gt; streamOfString = Pattern.compile(", ").splitAsStream("a, b, c");</template><template autoinsert="true" context="java" deleted="false" description="Filtering distinct elements using Java 8 streams" enabled="true" name="java8-stream-filter-distinict">List&lt;String&gt; words = Arrays.asList("hello", "cool", "Java8", "world!");&#13;
 &#13;
List&lt;Integer&gt; lengths = words.stream()&#13;
        .map(String::length)&#13;
        .distinct()&#13;
        .collect(Collectors.toList());&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Filtering and counting elements using Java 8 Streams" enabled="true" name="java8-stream-filtering-counting">//Filtering and counting elements using Java 8 Streams&#13;
&#13;
List&lt;String&gt; strings = Arrays.asList("a", "", "b", "", "c");&#13;
 &#13;
// Count the non-empty strings&#13;
long nonEmptyCount = strings.stream()&#13;
        .filter(x -&gt; !x.isEmpty())&#13;
        .count();&#13;
 &#13;
// Count the empty strings&#13;
long emptyCount = strings.stream()&#13;
        .filter(String::isEmpty) // same as .filter(x -&gt; x.isEmpty())&#13;
        .count();</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="java8-stream-of-array">//An array can also be the source of a stream:&#13;
&#13;
Stream&lt;String&gt; streamOfArray = Stream.of("a", "b", "c");&#13;
//We can also create a stream out of an existing array or of part of an array:&#13;
&#13;
String[] arr = new String[]{"a", "b", "c"};&#13;
Stream&lt;String&gt; streamOfArrayFull = Arrays.stream(arr);&#13;
Stream&lt;String&gt; streamOfArrayPart = Arrays.stream(arr, 1, 3);</template><template autoinsert="true" context="java" deleted="false" description="We can also create a stream of any type of Collection (Collection, List, Set):" enabled="true" name="java8-stream-of-collection">//We can also create a stream of any type of Collection (Collection, List, Set):&#13;
Collection&lt;String&gt; collection = Arrays.asList("a", "b", "c");&#13;
Stream&lt;String&gt; streamOfCollection = collection.stream();</template><template autoinsert="true" context="java" deleted="false" description="Java NIO class Files allows us to generate a Stream&lt;String&gt; of a text file through the lines() method. Every line of the text becomes an element of the stream:" enabled="true" name="java8-stream-of-lines-from-file">/*&#13;
Furthermore, Java NIO class Files allows us to generate a Stream&lt;String&gt; of a text file through the lines() method. Every line of the text becomes an element of the stream:&#13;
*/&#13;
Path path = Paths.get("C:\\file.txt");&#13;
Stream&lt;String&gt; streamOfStrings = Files.lines(path);&#13;
Stream&lt;String&gt; streamWithCharset = &#13;
  Files.lines(path, Charset.forName("UTF-8"));//The Charset can be specified as an argument of the lines() method.&#13;
</template><template autoinsert="false" context="java" deleted="false" description="j" enabled="true" name="java8-stream-peek-map-filter-collect">// use them in with streams&#13;
new ArrayList&lt;String&gt;().stream(). &#13;
// peek: debug streams without changes&#13;
peek(e -&gt; System.out.println(e)). &#13;
// map: convert every element into something  &#13;
map(e -&gt; e.hashCode()). &#13;
// filter: pass some elements through&#13;
filter(e -&gt; ((e.hashCode() % 2) == 0)).   &#13;
// collect the stream into a collection &#13;
collect(Collectors.toCollection(TreeSet::new))</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="java8-streams-emptystream">//2.1. Empty Stream&#13;
//We should use the empty() method in case of the creation of an empty stream:&#13;
&#13;
Stream&lt;String&gt; streamEmpty = Stream.empty();&#13;
//We often use the empty() method upon creation to avoid returning null for streams with no element:&#13;
&#13;
public Stream&lt;String&gt; streamOf(List&lt;String&gt; list) {&#13;
    return list == null || list.isEmpty() ? Stream.empty() : list.stream();&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Map and join elements using Java 8 Streams" enabled="true" name="java8-streams-map-join">List&lt;String&gt; strings = Arrays.asList("A", "bbb", "CC", "dd");&#13;
 &#13;
// Map the strings to UPPERCASE and join them with the : separator&#13;
String joined = strings.stream()&#13;
        .map(String::toUpperCase)&#13;
        .collect(Collectors.joining(":"));</template><template autoinsert="true" context="java-members" deleted="false" description="@Mock field" enabled="true" id="org.springframework.ide.eclipse.boot.templates.jumock" name="jumock">
${:import(org.mockito.Mock)}@Mock ${Type} ${mockName};
</template><template autoinsert="true" context="boot-members" deleted="false" description="JUnit MockMvc with WebApplicationContext setup" enabled="true" id="org.springframework.ide.eclipse.boot.templates.jumockmvcwac" name="jumockmvcwac">
${standardImports:import(org.junit.Before,org.springframework.beans.factory.annotation.Autowired,org.springframework.test.web.servlet.MockMvc,org.springframework.test.web.servlet.setup.MockMvcBuilders,org.springframework.web.context.WebApplicationContext)}
${:importStatic('org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*','org.springframework.test.web.servlet.result.MockMvcResultHandlers.*','org.springframework.test.web.servlet.result.MockMvcResultMatchers.*')}

    @Autowired
    WebApplicationContext context;
    
    MockMvc mockMvc;
    
    @Before
    public void setup() {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .build();
    }
</template><template autoinsert="true" context="java" deleted="false" description="Junit generate @Test methods with necessary hamcrest imports" enabled="true" name="junit-hamcrast">@${testType:newType(org.junit.Test)}&#13;
public void ${testName}() throws Exception {&#13;
    // Arrange&#13;
    ${staticImport:importStatic('org.hamcrest.MatcherAssert.*','org.hamcrest.Matchers.*')}${cursor} &#13;
    // Act&#13;
&#13;
    // Assert&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="test method based on selected word" enabled="true" name="junit-test-method">${:import(org.junit.Test, org.junit.Assert)}&#13;
@Test&#13;
public void ${word_selection}() throws Exception {&#13;
    try {&#13;
        ${cursor}&#13;
        Assert.fail("Not Implemented");&#13;
    } catch (Exception e) {&#13;
        System.out.println("Failed test");&#13;
        e.printStackTrace();&#13;
        throw e;&#13;
    }&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="junit-test-method-2" enabled="true" name="junit-test-method-2">@${testType:newType(org.junit.Test)}&#13;
 public void ${testname}() throws Exception {&#13;
     ${staticImport:importStatic('org.junit.Assert.*')}${cursor}&#13;
&#13;
     String expected = "" ;&#13;
     String actual = "" ;&#13;
&#13;
     Assert.assertEquals(expected, actual);&#13;
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Label" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.label" name="Label">${labelType:newType(org.eclipse.swt.widgets.Label)} ${label:newName(org.eclipse.swt.widgets.Label)}= new ${labelType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.NONE, SWT.WRAP, 'SWT.SEPARATOR | SWT.HORIZONTAL', 'SWT.SEPARATOR | SWT.VERTICAL')});
${label}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${label}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="lazy creation" enabled="true" id="org.eclipse.jdt.ui.templates.lazy" name="lazy">if (${name:var} == null) {
	${name} = new ${type}(${arguments});
	${cursor}
}

return ${name};</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Link" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.link" name="Link">${linkType:newType(org.eclipse.swt.widgets.Link)} ${link:newName(org.eclipse.swt.widgets.Link)}= new ${linkType}(${parent:var(org.eclipse.swt.widgets.Composite)}, SWT.NONE);
${link}.setLayoutData(new ${type:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${link}.setText(${word_selection}${});
${link}.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				${listener:link('')}
			}
		});
${imp:import(org.eclipse.swt.SWT, org.eclipse.swt.events.SelectionAdapter, org.eclipse.swt.events.SelectionEvent)}${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Create a new generic ArrayList" enabled="true" name="list">${:import(java.util.List,
  java.util.ArrayList)} 
List&lt;${argType}&gt; ${newName} = new ArrayList&lt;${argType}&gt;(); </template><template autoinsert="true" context="java" deleted="false" description="Create a new generic ArrayList" enabled="true" name="list">${:import(java.util.List,
  java.util.ArrayList)} 
List&lt;${argType}&gt; ${newName} = new ArrayList&lt;${argType}&gt;(); </template><template autoinsert="false" context="swt-statements" deleted="false" description="new List" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.list" name="List">${type:newType(org.eclipse.swt.widgets.List)} ${list:newName(org.eclipse.swt.widgets.List)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL', 'SWT.MULTI | SWT.V_SCROLL', SWT.MULTI, 'SWT.SINGLE | SWT.V_SCROLL | SWT.H_SCROLL', 'SWT.SINGLE | SWT.V_SCROLL', SWT.SINGLE)});
${list}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${list}.setItems(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="explicit lock aquisition" enabled="true" id="org.eclipse.jdt.ui.templates.lock" name="lock">${lock:var(java.util.concurrent.locks.Lock)}.lock();
try {
	${line_selection}${cursor}
} finally {
	${lock}.unlock();
}</template><template autoinsert="true" context="boot-statements" deleted="false" description="log an DEBUG message using slf4jlogger declared in this class" enabled="true" id="org.springframework.ide.eclipse.boot.templates.slf4j.logdebug" name="logd">
    ${log:field(org.slf4j.Logger)}.debug("${message}");
</template><template autoinsert="true" context="java-statements" deleted="false" description="logger debug" enabled="true" name="logd">if(LOGGER.isDebugEnabled())&#13;
     LOGGER.debug(${word_selection}${});&#13;
${cursor}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="logger debug" enabled="true" name="logd">if(LOGGER.isDebugEnabled())&#13;
     LOGGER.debug(${word_selection}${});&#13;
${cursor}&#13;
</template><template autoinsert="true" context="boot-statements" deleted="false" description="log an ERROR message using slf4jlogger declared in this class" enabled="true" id="org.springframework.ide.eclipse.boot.templates.slf4j.logerror" name="loge">
    ${log:field(org.slf4j.Logger)}.error("${message}", ${exception:var(java.lang.Throwable)});
</template><template autoinsert="true" context="java-statements" deleted="false" description="logger error" enabled="true" name="logerr">LOGGER.error(${word_selection}${}, ${exception_variable_name});&#13;
${cursor}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="logger error" enabled="true" name="logerr">LOGGER.error(${word_selection}${}, ${exception_variable_name});&#13;
${cursor}&#13;
</template><template autoinsert="true" context="boot-members" deleted="false" description="static Logger field using slf4j" enabled="true" id="org.springframework.ide.eclipse.boot.templates.slf4j.logger" name="logger">
${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}
private static final Logger ${log} = LoggerFactory.getLogger(${enclosing_type}.class);
</template><template autoinsert="true" context="java-members" deleted="false" description="create new logger" enabled="true" name="logger">${:import(org.slf4j.Logger,&#13;
          org.slf4j.LoggerFactory)}&#13;
private static final Logger LOGGER =&#13;
       LoggerFactory.getLogger(${enclosing_type}.class);&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Logger setup" enabled="true" name="logger">${:import(org.apache.commons.logging.Log,
	org.apache.commons.logging.LogFactory)} 

private static final Log log = LogFactory.getLog(${enclosing_type}.class);</template><template autoinsert="true" context="java-members" deleted="false" description="create new logger" enabled="true" name="logger">${:import(org.slf4j.Logger,&#13;
          org.slf4j.LoggerFactory)}&#13;
private static final Logger LOGGER =&#13;
       LoggerFactory.getLogger(${enclosing_type}.class);&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Logger setup" enabled="true" name="logger">${:import(org.apache.commons.logging.Log,
	org.apache.commons.logging.LogFactory)} 

private static final Log log = LogFactory.getLog(${enclosing_type}.class);</template><template autoinsert="true" context="boot-statements" deleted="false" description="log an INFO message using slf4jlogger declared in this class" enabled="true" id="org.springframework.ide.eclipse.boot.templates.slf4j.loginfo" name="logi">
    ${log:field(org.slf4j.Logger)}.info("${message}");
</template><template autoinsert="true" context="java-statements" deleted="false" description="logger info" enabled="true" name="logi">LOGGER.info(${word_selection}${});&#13;
${cursor}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="logger info" enabled="true" name="logi">LOGGER.info(${word_selection}${});&#13;
${cursor}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Log with specified level" enabled="true" name="loglevel">${:import(java.util.logging.Level)} 
if(${log:var(java.util.logging.Logger)}.isLoggable(Level.${LEVEL})) {
   ${log:var(java.util.logging.Logger)}.${level}(${});
}
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Log with specified level" enabled="true" name="loglevel">${:import(java.util.logging.Level)} 
if(${log:var(java.util.logging.Logger)}.isLoggable(Level.${LEVEL})) {
   ${log:var(java.util.logging.Logger)}.${level}(${});
}
${cursor}</template><template autoinsert="true" context="java-statements" deleted="false" description="log error and throw exception" enabled="true" name="logthrow">LOGGER.error(${word_selection}${}, ${exception_variable_name});&#13;
throw ${exception_variable_name};&#13;
${cursor}&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="log error and throw exception" enabled="true" name="logthrow">LOGGER.error(${word_selection}${}, ${exception_variable_name});&#13;
throw ${exception_variable_name};&#13;
${cursor}&#13;
</template><template autoinsert="true" context="boot-statements" deleted="false" description="log a WARNING using slf4jlogger declared in this class" enabled="true" id="org.springframework.ide.eclipse.boot.templates.slf4j.logwarn" name="logw">
    ${log:field(org.slf4j.Logger)}.warn("${warning}");
</template><template autoinsert="false" context="java-members" deleted="false" description="main method" enabled="true" id="org.eclipse.jdt.ui.templates.main" name="main">public static void main(String[] args) {
	${cursor}
}</template><template autoinsert="true" context="boot-members" deleted="false" description="Spring Boot main method" enabled="true" id="org.springframework.ide.eclipse.boot.templates.main" name="main">
public static void main(String[] args) throws Exception {
        SpringApplication.run(${enclosing_type}.class, args);
}${:import(org.springframework.boot.SpringApplication)}
</template><template autoinsert="false" context="swt-statements" deleted="false" description="new top level Shell with event loop" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.mainloop" name="mainloop">${displayType:newType(org.eclipse.swt.widgets.Display)} ${display:newName(org.eclipse.swt.widgets.Display)} = new ${displayType}();
${shellType:newType(org.eclipse.swt.widgets.Shell)} ${shell:newName(org.eclipse.swt.widgets.Shell)} = new ${shellType}(${display});
${shell}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));

${cursor}

${shell}.pack();
${shell}.open();
while (!${shell}.isDisposed()) {
	if (!${display}.readAndDispatch ()) 
		${display}.sleep();
}
${display}.dispose();</template><template autoinsert="true" context="java" deleted="false" description="Create a new generic HashMap" enabled="true" name="map">${:import(java.util.Map,
  java.util.HashMap)} 
Map&lt;${argType},${argType}&gt; ${newName} = new HashMap&lt;${argType},${argType}&gt;(); </template><template autoinsert="true" context="java" deleted="false" description="Create a new generic HashMap" enabled="true" name="map">${:import(java.util.Map,
  java.util.HashMap)} 
Map&lt;${argType},${argType}&gt; ${newName} = new HashMap&lt;${argType},${argType}&gt;(); </template><template autoinsert="true" context="java" deleted="false" description="Iterate through a map, print the keys and values" enabled="true" name="map-iterate">${:import(java.util.Iterator,  
           java.util.Map)}
for (Iterator&lt;Map.Entry&lt;${type},${type2}&gt;&gt; it = ${collection}.entrySet().iterator(); it.hasNext();) {
    Map.Entry&lt;${type},${type2}&gt; entry = it.next();
    ${type} key = entry.getKey();
    ${type2} value = entry.getValue();
    // do something with the key and the value
}
	</template><template autoinsert="true" context="java" deleted="false" description="Iterate through a map, print the keys and values" enabled="true" name="map-iterate">${:import(java.util.Iterator,  
           java.util.Map)}
for (Iterator&lt;Map.Entry&lt;${type},${type2}&gt;&gt; it = ${collection}.entrySet().iterator(); it.hasNext();) {
    Map.Entry&lt;${type},${type2}&gt; entry = it.next();
    ${type} key = entry.getKey();
    ${type2} value = entry.getValue();
    // do something with the key and the value
}
	</template><template autoinsert="false" context="java" deleted="false" description="create new object" enabled="true" id="org.eclipse.jdt.ui.templates.new" name="new">${type} ${name} = new ${type}(${});</template><template autoinsert="false" context="java-empty" deleted="false" description="create new class" enabled="true" id="org.eclipse.jdt.ui.templates.new_class" name="new_class">package ${enclosing_package};

public class ${primary_type_name} ${cursor} {

}</template><template autoinsert="false" context="java-empty" deleted="false" description="create new enumeration" enabled="true" id="org.eclipse.jdt.ui.templates.new_enum" name="new_enum">package ${enclosing_package};

public enum ${primary_type_name} ${cursor} {

}</template><template autoinsert="false" context="java-empty" deleted="false" description="create new interface" enabled="true" id="org.eclipse.jdt.ui.templates.new_iface" name="new_iface">package ${enclosing_package};

public interface ${primary_type_name} ${cursor} {

}</template><template autoinsert="false" context="module" deleted="false" description="create module declaration" enabled="true" id="org.eclipse.jdt.ui.templates.new_module" name="new_module">module ${name} {
	${cursor}
}</template><template autoinsert="false" context="java-empty" deleted="false" description="create new record" enabled="true" id="org.eclipse.jdt.ui.templates.new_record" name="new_record">package ${enclosing_package};

public record ${primary_type_name}(${cursor}) {

}</template><template autoinsert="false" context="java" deleted="false" description="non-externalized string marker" enabled="true" id="org.eclipse.jdt.ui.templates.non-nls" name="nls">//$$NON-NLS-${N}$$</template><template autoinsert="true" context="postfix" deleted="false" description="Creates an if statement and checks if the expression does not resolve to null" enabled="true" id="org.eclipse.jdt.postfixcompletion.nnull" name="nnull">if (${i:inner_expression(java.lang.Object,array)} != null) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="boot-statements" deleted="false" description="Assert that a variable is not null, using Spring's Assert class. Context restriction: [!test]" enabled="true" id="org.springframework.ide.eclipse.boot.templates.assert.notNull.Spring" name="notnull">
Assert.notNull(${name:var}, "${name} must not be null");${:import(org.springframework.util.Assert)}
</template><template autoinsert="true" context="boot-statements" deleted="false" description="Assert that a variable is not null, using JUnit's Assert class. Context restriction: [test][!assertj]" enabled="true" id="org.springframework.ide.eclipse.boot.templates.assert.notNull.JUnit" name="notnull">
Assert.assertNotNull("${name:var} must not be null", ${name});${:import(org.junit.Assert)}
</template><template autoinsert="true" context="boot-statements" deleted="false" description="Assert that a variable is not null, using AssertJ. Context restriction: [test][assertj]" enabled="true" id="org.springframework.ide.eclipse.boot.templates.assert.notNull.AssertJ" name="notnull">
assertThat(${name:var}).isNotNull();${:importStatic('org.assertj.core.api.Assertions.*')} 	
</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;null&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_null" name="null">&lt;code&gt;null&lt;/code&gt;</template><template autoinsert="true" context="postfix" deleted="false" description="Creates an if statement which checks if expression resolves to null" enabled="true" id="org.eclipse.jdt.postfixcompletion.null" name="null">if (${i:inner_expression(java.lang.Object,array)} == null) {&#13;
	${cursor}&#13;
}</template><template autoinsert="false" context="java" deleted="false" description="Java 8 Optional of non-nullable" enabled="true" name="optional">${:import(java.util.Optional)}
Optional.of(${of});</template><template autoinsert="false" context="java" deleted="false" description="Java 8 Optional of nullable" enabled="true" name="optional nullable">${:import(java.util.Optional)}
Optional.ofNullable(${of});</template><template autoinsert="true" context="java" deleted="false" description="Parse a time using SimpleDateFormat" enabled="true" name="parsetime">${:import(java.text.DateFormat,
		  java.text.ParseException,
		  java.text.SimpleDateFormat,
		  java.util.Date)}
try {
    DateFormat formatter = new SimpleDateFormat("hh.mm.ss a");
    Date date = (Date)formatter.parse("02.36.33 PM");
} catch (ParseException e) {
	throw e;
}
	</template><template autoinsert="true" context="java" deleted="false" description="Parse a time using SimpleDateFormat" enabled="true" name="parsetime">${:import(java.text.DateFormat,
		  java.text.ParseException,
		  java.text.SimpleDateFormat,
		  java.util.Date)}
try {
    DateFormat formatter = new SimpleDateFormat("hh.mm.ss a");
    Date date = (Date)formatter.parse("02.36.33 PM");
} catch (ParseException e) {
	throw e;
}
	</template><template autoinsert="true" context="boot-members" deleted="false" description="PostMapping method" enabled="true" id="org.springframework.ide.eclipse.boot.templates.PostMapping" name="PostMapping method">${x:import(org.springframework.web.bind.annotation.PostMapping, org.springframework.web.bind.annotation.RequestBody)}@PostMapping(value="${path}")
public ${SomeEnityData} ${postMethodName}(@RequestBody ${SomeEnityData} ${entity}) {
	//TODO: process POST request
	${cursor}
	return ${entity};
}
</template><template autoinsert="false" context="java-members" deleted="false" description="private method" enabled="true" id="org.eclipse.jdt.ui.templates.private_method" name="private_method">private ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="private static method" enabled="true" id="org.eclipse.jdt.ui.templates.private_static_method" name="private_static_method">private static ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="protected method" enabled="true" id="org.eclipse.jdt.ui.templates.protected_method" name="protected_method">protected ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="public method" enabled="true" id="org.eclipse.jdt.ui.templates.public_method" name="public_method">public ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="public static method" enabled="true" id="org.eclipse.jdt.ui.templates.public_static_method" name="public_static_method">public static ${return_type} ${name}(${}) {
	${cursor}
}</template><template autoinsert="true" context="boot-members" deleted="false" description="PutMapping method" enabled="true" id="org.springframework.ide.eclipse.boot.templates.PutMapping" name="PutMapping method">${x:import(org.springframework.web.bind.annotation.PutMapping, org.springframework.web.bind.annotation.RequestBody, org.springframework.web.bind.annotation.PathVariable)}@PutMapping(value="${path}/{${id}}")
public ${SomeEnityData} ${putMethodName}(@PathVariable ${pvt:link(String,int,long)} ${id}, @RequestBody ${SomeEnityData} ${entity}) {
	//TODO: process PUT request
	${cursor}
	return ${entity};
}
</template><template autoinsert="true" context="java-statements" deleted="false" description="iterate over lines in file" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.io.IOException,&#13;
          java.io.BufferedReader)}&#13;
try (BufferedReader in = Files.newBufferedReader(Paths.get(${fileName:var(String)}),&#13;
                                                 Charset.forName("UTF-8"))) {&#13;
	String line = null;&#13;
	while ((line = in.readLine()) != null) {&#13;
		${cursor}&#13;
	}&#13;
} catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}</template><template autoinsert="true" context="java-statements" deleted="false" description="read all lines from file as a list" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.util.List,&#13;
          java.util.ArrayList)}&#13;
List&lt;String&gt; lines = new ArrayList&lt;&gt;();&#13;
try{&#13;
	lines = Files.readAllLines(Paths.get(${fileName:var(String)}),&#13;
                                        Charset.forName("UTF-8"));&#13;
}catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}&#13;
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Read a file line by line" enabled="true" name="readfile">${:import(java.io.BufferedReader,  
           java.io.FileNotFoundException,  
           java.io.FileReader,  
           java.io.IOException)}  
 BufferedReader in = null;  
 try {  
    in = new BufferedReader(new FileReader(${fileName}));  
    String line;  
    while ((line = in.readLine()) != null) {  
       ${process}  
    }  
 }  
 catch (FileNotFoundException e) {  
    logger.error(e) ;  
 }  
 catch (IOException e) {  
    logger.error(e) ;  
 } finally {  
    if(in != null) in.close();  
 }  
 ${cursor}
	</template><template autoinsert="true" context="java-statements" deleted="false" description="iterate over lines in file" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.io.IOException,&#13;
          java.io.BufferedReader)}&#13;
try (BufferedReader in = Files.newBufferedReader(Paths.get(${fileName:var(String)}),&#13;
                                                 Charset.forName("UTF-8"))) {&#13;
	String line = null;&#13;
	while ((line = in.readLine()) != null) {&#13;
		${cursor}&#13;
	}&#13;
} catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}</template><template autoinsert="true" context="java-statements" deleted="false" description="read all lines from file as a list" enabled="true" name="readfile">${:import(java.nio.file.Files,&#13;
          java.nio.file.Paths,&#13;
          java.nio.charset.Charset,&#13;
          java.util.List,&#13;
          java.util.ArrayList)}&#13;
List&lt;String&gt; lines = new ArrayList&lt;&gt;();&#13;
try{&#13;
	lines = Files.readAllLines(Paths.get(${fileName:var(String)}),&#13;
                                        Charset.forName("UTF-8"));&#13;
}catch (IOException e) {&#13;
    // ${todo}: handle exception&#13;
}&#13;
${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Read a file line by line" enabled="true" name="readfile">${:import(java.io.BufferedReader,  
           java.io.FileNotFoundException,  
           java.io.FileReader,  
           java.io.IOException)}  
 BufferedReader in = null;  
 try {  
    in = new BufferedReader(new FileReader(${fileName}));  
    String line;  
    while ((line = in.readLine()) != null) {  
       ${process}  
    }  
 }  
 catch (FileNotFoundException e) {  
    logger.error(e) ;  
 }  
 catch (IOException e) {  
    logger.error(e) ;  
 } finally {  
    if(in != null) in.close();  
 }  
 ${cursor}
	</template><template autoinsert="true" context="boot-members" deleted="false" description="RequestMapping method" enabled="true" id="org.springframework.ide.eclipse.boot.templates.RequestMapping" name="RequestMapping method">${x:import(org.springframework.web.bind.annotation.RequestMapping, org.springframework.web.bind.annotation.RequestMethod, org.springframework.web.bind.annotation.RequestParam)}@RequestMapping(value="${path}", method=RequestMethod.${GET})
public ${SomeData} ${requestMethodName}(@RequestParam ${String} ${param}) {
	return new ${SomeData}(${cursor});
}
</template><template autoinsert="true" context="java" deleted="false" description="Log and rethrow a caught exception" enabled="true" name="rethrow">log.error("${cursor}");
throw ${exception_variable_name};</template><template autoinsert="true" context="java" deleted="false" description="Log and rethrow a caught exception" enabled="true" name="rethrow">log.error("${cursor}");
throw ${exception_variable_name};</template><template autoinsert="true" context="boot-statements" deleted="false" description="Call restTemplate.exchange" enabled="true" id="org.springframework.ide.eclipse.boot.templates.rtexchange" name="rtex">
${:import(org.springframework.core.ParameterizedTypeReference,org.springframework.hateoas.PagedResources,org.springframework.http.HttpEntity,org.springframework.http.HttpMethod,org.springframework.http.ResponseEntity)}
ResponseEntity&lt;PagedResources&lt;?&gt;&gt; result = ${restTemplate:var(org.springframework.web.client.RestTemplate)}.exchange("", 
     HttpMethod.GET, 
     new HttpEntity&lt;Void&gt;((Void) null),
     new ParameterizedTypeReference&lt;PagedResources&lt;${cursor}&gt;&gt;() {});
</template><template autoinsert="false" context="java" deleted="false" description="runnable" enabled="true" id="org.eclipse.jdt.ui.templates.runnable" name="runnable">new Runnable() {
	public void run() {
		${line_selection}
	}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new SashForm" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.sashform" name="SashForm">${type:newType(org.eclipse.swt.custom.SashForm)} ${sash:newName(org.eclipse.swt.custom.SashForm)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.HORIZONTAL, SWT.VERTICAL)});
${sash}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}

${sash}.setWeights(new int[] {1, 1});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Scale" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.scale" name="Scale">${scaleType:newType(org.eclipse.swt.widgets.Scale)} ${scale:newName(org.eclipse.swt.widgets.Scale)}= new ${scaleType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.HORIZONTAL, SWT.VERTICAL)});
${scale}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, FILL, CENTER, END)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${scale}.setMaximum(${max:link(100)});
${scale}.setIncrement(${inc:link(5)});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ScrolledComposite" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.scrolledcomposite" name="ScrolledComposite">${compositeType:newType(org.eclipse.swt.custom.ScrolledComposite)} ${scrolled:newName(org.eclipse.swt.custom.ScrolledComposite)} = new ${compositeType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.H_SCROLL | SWT.V_SCROLL', SWT.H_SCROLL, SWT.V_SCROLL)});
${scrolled}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${scrolled}.setExpandVertical(${exV:link(false, true)});
${scrolled}.setExpandHorizontal(${exH:link(false, true)});
${imp:import(org.eclipse.swt.SWT)}${cursor}

${scrolled}.setContent(${content});
Point ${contentSize:newName(org.eclipse.swt.graphics.Point)} = ${content}.computeSize(SWT.DEFAULT, SWT.DEFAULT);
${content}.setSize(${contentSize});
${scrolled}.setMinSize(${contentSize});</template><template autoinsert="false" context="java-members" deleted="false" description="JUnit 4 test case set up method" enabled="true" name="setUp">@${testType:newType(org.junit.Before)}
public void setUp() {
  ${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Shell" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.shell" name="Shell">${shellType:newType(org.eclipse.swt.widgets.Shell)} ${shell:newName(org.eclipse.swt.widgets.Shell)} = new ${shellType}(${parent:var(org.eclipse.swt.widgets.Shell)}, ${style:link('SWT.DIALOG_TRIM | SWT.PRIMARY_MODAL', 'SWT.DIALOG_TRIM | SWT.MODELESS', 'SWT.SHELL_TRIM | SWT.MODELESS', 'SWT.SHELL_TRIM | SWT.PRIMARY_MODAL')});
${shell}.setLayout(new ${layoutType:newType(org.eclipse.swt.layout.GridLayout)}(${numberColumns:link(1, 2, 3, 4, 5)}, ${equalColumns:link(false, true)}));

${imp:import(org.eclipse.swt.SWT)}${cursor}

${shell}.pack();

${shell}.open();</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a short if statement" enabled="true" id="org.eclipse.jdt.postfixcompletion.sif" name="sif">((${i:inner_expression(boolean)}) ? ${} : ${cursor})</template><template autoinsert="true" context="java-statements" deleted="false" description="" enabled="true" name="slf4j">${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}
private static final Logger LOGGER = LoggerFactory.getLogger(${enclosing_type}.class);</template><template autoinsert="true" context="java-statements" deleted="false" description="" enabled="true" name="slf4j">${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}
private static final Logger LOGGER = LoggerFactory.getLogger(${enclosing_type}.class);</template><template autoinsert="true" context="postfix" deleted="false" description="Creates an if statement which checks if the expression does not resolve to null" enabled="true" id="org.eclipse.jdt.postfixcompletion.snnull" name="snnull">(${i:inner_expression(java.lang.Object,array)} != null) ? ${inner_expression}${} : ${cursor}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a short if statement which checks for null" enabled="true" id="org.eclipse.jdt.postfixcompletion.snull" name="snull">(${i:inner_expression(java.lang.Object,array)} == null) ? ${} : ${inner_expression}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Spinner" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.spinner" name="Spinner">${spinnerType:newType(org.eclipse.swt.widgets.Spinner)} ${spinner:newName(org.eclipse.swt.widgets.Spinner)}= new ${spinnerType}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.BORDER, 'SWT.WRAP | SWT.BORDER', 'SWT.READ_ONLY | SWT.BORDER', 'SWT.READ_ONLY | SWT.WRAP | SWT.BORDER', SWT.WRAP, SWT.READ_ONLY)});
${spinner}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(BEGINNING, CENTER, END, FILL)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(false, true)}, ${vex:link(false, true)}));
${spinner}.setMaximum(${max:link(10)});
${spinner}.setIncrement(${inc:link(1)});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="java" deleted="false" description="Spring Entity Resource" enabled="true" name="spring-entity-resource">package ${PACKAGE_NAME};&#13;
&#13;
import org.springframework.hateoas.Link;&#13;
import org.springframework.hateoas.Resource;&#13;
&#13;
public class ${NAME} extends Resource&lt;${ENTITY}&gt; {&#13;
&#13;
    public ${NAME}(${ENTITY} content, Link... links) {&#13;
        super(content, links);&#13;
    }&#13;
&#13;
    public ${NAME}(${ENTITY} content, Iterable&lt;Link&gt; links) {&#13;
        super(content, links);&#13;
    }&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Assembler for creating resources from entities" enabled="true" name="spring-entity-resource-assembler">package ${PACKAGE_NAME};&#13;
&#13;
import org.springframework.hateoas.Link;&#13;
import org.springframework.hateoas.Resources;&#13;
import org.springframework.hateoas.mvc.ResourceAssemblerSupport;&#13;
&#13;
import java.util.List;&#13;
&#13;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;&#13;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;&#13;
&#13;
/**&#13;
 * Assembler for creating resources from entities&#13;
 */&#13;
class ${NAME} extends ResourceAssemblerSupport&lt;${ENTITY}, ${ENTITY_RESOURCE}&gt; {&#13;
&#13;
    public ${NAME}() {&#13;
        super(${REST_CONTROLLER}.class, ${ENTITY_RESOURCE}.class);&#13;
    }&#13;
&#13;
    @Override&#13;
    public ${ENTITY_RESOURCE} toResource(${ENTITY} entity) {&#13;
        Link link = linkTo(methodOn(${REST_CONTROLLER}.class, entity.getId())&#13;
                .get${ENTITY}ById(entity.getId())).withSelfRel();&#13;
        return new ${ENTITY_RESOURCE}(entity, link);&#13;
    }&#13;
&#13;
    public Resources&lt;${ENTITY_RESOURCE}&gt; to${ENTITY}Resources(Iterable&lt;? extends ${ENTITY}&gt; entities) {&#13;
        List&lt;${ENTITY_RESOURCE}&gt; entityResources = super.toResources(entities);&#13;
        Link link = linkTo(methodOn(${REST_CONTROLLER}.class)&#13;
                .getAll${ENTITY}s()).withSelfRel();&#13;
        return new Resources&lt;&gt;(entityResources, link);&#13;
    }&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="spring-entity-resource-controller">package ${PACKAGE_NAME};&#13;
&#13;
import org.springframework.beans.factory.annotation.Autowired;&#13;
import org.springframework.hateoas.ExposesResourceFor;&#13;
import org.springframework.hateoas.Link;&#13;
import org.springframework.hateoas.MediaTypes;&#13;
import org.springframework.hateoas.Resources;&#13;
import org.springframework.http.HttpStatus;&#13;
import org.springframework.http.MediaType;&#13;
import org.springframework.http.ResponseEntity;&#13;
import org.springframework.web.bind.annotation.GetMapping;&#13;
import org.springframework.web.bind.annotation.PatchMapping;&#13;
import org.springframework.web.bind.annotation.PathVariable;&#13;
import org.springframework.web.bind.annotation.PostMapping;&#13;
import org.springframework.web.bind.annotation.RequestBody;&#13;
import org.springframework.web.bind.annotation.ResponseStatus;&#13;
import org.springframework.web.bind.annotation.RestController;&#13;
&#13;
import javax.validation.Valid;&#13;
import java.net.URI;&#13;
import java.util.List;&#13;
import java.util.Optional;&#13;
&#13;
@ExposesResourceFor(${ENTITY}Resource.class)&#13;
@RestController&#13;
public class ${NAME} {&#13;
&#13;
    private ${ENTITY}Repository ${RESOURCE}Repository;&#13;
    private ${ENTITY}ResourceAssembler ${RESOURCE}ResourceAssembler = new ${ENTITY}ResourceAssembler();&#13;
&#13;
    @Autowired&#13;
    public ${NAME}(${ENTITY}Repository ${RESOURCE}Repository) {&#13;
        this.${RESOURCE}Repository = ${RESOURCE}Repository;&#13;
    }&#13;
&#13;
    @GetMapping(value = "/${RESOURCE}s", produces = {MediaType.APPLICATION_JSON_VALUE, MediaTypes.HAL_JSON_VALUE})&#13;
    public ResponseEntity&lt;Resources&lt;${ENTITY}Resource&gt;&gt; getAll${ENTITY}s() {&#13;
        List&lt;${ENTITY}&gt; all = ${RESOURCE}Repository.findAll();&#13;
        Resources&lt;${ENTITY}Resource&gt; ${RESOURCE}Resources = ${RESOURCE}ResourceAssembler.to${ENTITY}Resources(all);&#13;
        return new ResponseEntity&lt;&gt;(${RESOURCE}Resources, HttpStatus.OK);&#13;
    }&#13;
&#13;
    @PostMapping(value = "/${RESOURCE}s", produces = {MediaType.APPLICATION_JSON_VALUE, MediaTypes.HAL_JSON_VALUE})&#13;
    public ResponseEntity&lt;${ENTITY}Resource&gt; add${ENTITY}(@Valid @RequestBody ${ENTITY} ${RESOURCE}) {&#13;
        ${ENTITY} saved${ENTITY} = ${RESOURCE}Repository.save(${RESOURCE});&#13;
        ${ENTITY}Resource ${RESOURCE}Resource = ${RESOURCE}ResourceAssembler.toResource(saved${ENTITY});&#13;
        return ResponseEntity.created(URI.create(${RESOURCE}Resource.getLink(Link.REL_SELF).getHref())).build();&#13;
    }&#13;
&#13;
    @GetMapping(value = "/${RESOURCE}s/{id}", produces = {MediaType.APPLICATION_JSON_VALUE, MediaTypes.HAL_JSON_VALUE})&#13;
    public ResponseEntity&lt;${ENTITY}Resource&gt; get${ENTITY}ById(@PathVariable Long id) {&#13;
        Optional&lt;${ENTITY}&gt; ${RESOURCE} = ${RESOURCE}Repository.findById(id);&#13;
        if (${RESOURCE}.isPresent()) {&#13;
            ${ENTITY}Resource ${RESOURCE}Resource = ${RESOURCE}ResourceAssembler.toResource(${RESOURCE}.get());&#13;
            return new ResponseEntity&lt;&gt;(${RESOURCE}Resource, HttpStatus.OK);&#13;
        } else {&#13;
            return new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND);&#13;
        }&#13;
    }&#13;
&#13;
}</template><template autoinsert="true" context="boot" deleted="false" description="Spring property injection" enabled="true" name="spring-inject">${:import(org.springframework.beans.factory.annotation.Autowired)}&#13;
private ${class_to_inject} ${var_name};&#13;
&#13;
@Autowired&#13;
public void set${class_to_inject}(${class_to_inject} ${var_name}) {&#13;
  this.${var_name} = ${var_name};&#13;
}&#13;
&#13;
public ${class_to_inject} get${class_to_inject}() {&#13;
  return this.${var_name};&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="spring-jpa-entity">package ${PACKAGE_NAME};&#13;
&#13;
import javax.persistence.Entity;&#13;
import javax.persistence.GeneratedValue;&#13;
import javax.persistence.Id;&#13;
&#13;
@Entity&#13;
public class ${NAME} {&#13;
&#13;
    @Id&#13;
    @GeneratedValue&#13;
    private Long id;&#13;
&#13;
    public Long getId() {&#13;
      return id;&#13;
    }&#13;
    &#13;
    public void setId(Long id) {&#13;
      this.id = id;&#13;
    }&#13;
&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="spring jpa id generator" enabled="true" name="spring-jpa-id">@Id&#13;
@GeneratedValue(strategy = GenerationType.IDENTITY)&#13;
private Long id;&#13;
&#13;
public Long getId(){&#13;
    return id;&#13;
}&#13;
&#13;
${cursor}&#13;
${:import (javax.persistence.GenerationType,javax.persistence.GeneratedValue,javax.persistence.Id)}</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="spring-jpa-repo">package ${PACKAGE_NAME};&#13;
&#13;
import org.springframework.data.jpa.repository.JpaRepository;&#13;
import org.springframework.stereotype.Repository;&#13;
&#13;
@Repository&#13;
public interface ${NAME} extends JpaRepository&lt;${ENTITY},Long&gt; {&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="spring-rest-root">package ${PACKAGE_NAME};&#13;
&#13;
import org.springframework.hateoas.ResourceSupport;&#13;
import org.springframework.http.ResponseEntity;&#13;
import org.springframework.web.bind.annotation.GetMapping;&#13;
import org.springframework.web.bind.annotation.RestController;&#13;
&#13;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;&#13;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;&#13;
&#13;
@RestController&#13;
class ${NAME} {&#13;
&#13;
    @GetMapping("/")&#13;
    public ResponseEntity&lt;ResourceSupport&gt; root() {&#13;
&#13;
        ResourceSupport resourceSupport = new ResourceSupport();&#13;
&#13;
        resourceSupport.add(linkTo(methodOn(${NAME}.class).root()).withSelfRel());&#13;
&#13;
        return ResponseEntity.ok(resourceSupport);&#13;
    }&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="" enabled="true" name="spring-rest-test">package ${PACKAGE_NAME};&#13;
&#13;
import com.fasterxml.jackson.databind.ObjectMapper;&#13;
import org.junit.Before;&#13;
import org.junit.Rule;&#13;
import org.junit.Test;&#13;
import org.junit.runner.RunWith;&#13;
import org.springframework.beans.factory.annotation.Autowired;&#13;
import org.springframework.boot.test.context.SpringBootTest;&#13;
import org.springframework.http.MediaType;&#13;
import org.springframework.restdocs.JUnitRestDocumentation;&#13;
import org.springframework.test.context.junit4.SpringRunner;&#13;
import org.springframework.test.web.servlet.MockMvc;&#13;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#13;
import org.springframework.web.context.WebApplicationContext;&#13;
&#13;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;&#13;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.documentationConfiguration;&#13;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.get;&#13;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;&#13;
&#13;
@RunWith(SpringRunner.class)&#13;
@SpringBootTest&#13;
public class ${NAME} {&#13;
&#13;
    @Rule&#13;
    public final JUnitRestDocumentation restDocumentation = new JUnitRestDocumentation();&#13;
&#13;
    @Autowired&#13;
    private WebApplicationContext context;&#13;
&#13;
    private MockMvc mockMvc;&#13;
&#13;
    @Before&#13;
    public void setUp() {&#13;
        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.context)&#13;
                .apply(documentationConfiguration(this.restDocumentation).operationPreprocessors()&#13;
                        .withResponseDefaults(prettyPrint()))&#13;
                .build();&#13;
    }&#13;
&#13;
    @Test&#13;
    public void testGetAll${ENTITY}s() throws Exception {&#13;
        mockMvc.perform(get("/").accept(MediaType.APPLICATION_JSON))&#13;
        	.andExpect(status().isOk());&#13;
    }&#13;
}&#13;
</template><template autoinsert="false" context="java-members" deleted="false" description="static final field" enabled="true" id="org.eclipse.jdt.ui.templates.static_final" name="static_final">${visibility:link(public,protected,private)} static final ${type} ${NAME} = ${word_selection}${};</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a new stream using Stream.of" enabled="true" id="org.eclipse.jdt.postfixcompletion.stream" name="stream">Stream.of(${i:inner_expression(array)})${cursor}</template><template autoinsert="true" context="java" deleted="false" description="format string" enabled="true" name="strf">String.format("${word_selection}${}",${var}${cursor})</template><template autoinsert="true" context="java" deleted="false" description="format string" enabled="true" name="strf">String.format("${word_selection}${}",${var}${cursor})</template><template autoinsert="false" context="swt-statements" deleted="false" description="new StyledText " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.styledtext" name="StyledText">${type:newType(org.eclipse.swt.custom.StyledText)} ${text:newName(org.eclipse.swt.custom.StyledText)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.V_SCROLL | SWT.H_SCROLL', 'SWT.V_SCROLL | SWT.H_SCROLL | SWT.READ_ONLY', 'SWT.WRAP | SWT.V_SCROLL', SWT.NONE, SWT.BORDER, SWT.FULL_SELECTION)});
${text}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${text}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new StyleRange for a StyledText" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.stylerange" name="StyleRange">${type:newType(org.eclipse.swt.custom.StyleRange)} ${range:newName(org.eclipse.swt.custom.StyleRange)}= new ${type}();
${range}.start= ${start:link(0)};
${range}.length= ${length:link(0)};
${range}.foreground= ${fColor:link(null, 'Display.getDefault().getSystemColor(SWT.COLOR_BLACK)', 'Display.getDefault().getSystemColor(SWT.COLOR_WHITE)', 'Display.getDefault().getSystemColor(SWT.COLOR_RED)', 'Display.getDefault().getSystemColor(SWT.COLOR_BLUE)', 'Display.getDefault().getSystemColor(SWT.COLOR_GREEN)')};
${range}.background= ${bColor:link(null, 'Display.getDefault().getSystemColor(SWT.COLOR_BLACK)', 'Display.getDefault().getSystemColor(SWT.COLOR_WHITE)', 'Display.getDefault().getSystemColor(SWT.COLOR_RED)', 'Display.getDefault().getSystemColor(SWT.COLOR_BLUE)', 'Display.getDefault().getSystemColor(SWT.COLOR_GREEN)')};
${range}.fontStyle= ${fStyle:link(SWT.NORMAL, SWT.ITALIC, SWT.BOLD)};
${text:var(org.eclipse.swt.custom.StyledText)}.setStyleRange(${range});
${imp:import(org.eclipse.swt.SWT, org.eclipse.swt.widgets.Display)}${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="switch case statement" enabled="true" id="org.eclipse.jdt.ui.templates.switch" name="switch">switch (${key}) {
	case ${value}:
		${cursor}
		break;

	default:
		break;
}</template><template autoinsert="false" context="java-statements" deleted="false" description="switch labeled statement" enabled="true" id="org.eclipse.jdt.ui.templates.switch.labeled" name="switch">switch (${key}) {
	case ${value} -&gt;
		${cursor}
		

	default -&gt;
		throw new IllegalArgumentException("Unexpected value: " + ${key});
}</template><template autoinsert="false" context="java" deleted="false" description="switch case expression" enabled="true" id="org.eclipse.jdt.ui.templates.switch.case.expression" name="switch">switch (${key}) {
	case ${value}: {
		${cursor}
		yield ${type};
	}
	default:
		throw new IllegalArgumentException("Unexpected value: " + ${key});
}</template><template autoinsert="false" context="java" deleted="false" description="switch labeled expression" enabled="true" id="org.eclipse.jdt.ui.templates.switch.labeled.expression" name="switch">switch (${key}) {
	case ${value} -&gt;
		${cursor}
		

	default -&gt;
		throw new IllegalArgumentException("Unexpected value: " + ${key});
}</template><template autoinsert="false" context="java-statements" deleted="false" description="synchronized block" enabled="true" id="org.eclipse.jdt.ui.templates.synchronized" name="synchronized">synchronized (${mutex:var}) {
	${line_selection}
}</template><template autoinsert="true" context="java-statements" deleted="false" description="print to standard error" enabled="true" id="org.eclipse.jdt.ui.templates.syserr" name="syserr">System.err.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="java-statements" deleted="false" description="print formatted string to standard out" enabled="true" name="sysf">System.out.printf("${word_selection}${}",${var}${cursor});&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="print formatted string to standard out" enabled="true" name="sysf">System.out.printf("${word_selection}${}",${var}${cursor});&#13;
</template><template autoinsert="true" context="java-statements" deleted="false" description="print to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.sysout" name="sysout">System.out.println(${word_selection}${});${cursor}</template><template autoinsert="true" context="postfix" deleted="false" description="Sends the affected string to a System.out.println(..) call" enabled="true" id="org.eclipse.jdt.postfixcompletion.sysout" name="sysout">System.out.println(${i:inner_expression(java.lang.String)}${});${cursor}</template><template autoinsert="true" context="java-statements" deleted="false" description="print current method to standard out" enabled="true" id="org.eclipse.jdt.ui.templates.systrace" name="systrace">System.out.println("${enclosing_type}.${enclosing_method}()");</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TabFolder" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tabfolder" name="TabFolder">${type:newType(org.eclipse.swt.widgets.TabFolder)} ${folder:newName(org.eclipse.swt.widgets.TabFolder)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.TOP, SWT.BOTTOM)});
${folder}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TabItem for a TabFolder" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tabitem" name="TabItem">${type:newType(org.eclipse.swt.widgets.TabItem)} ${item:newName(org.eclipse.swt.widgets.TabItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.TabFolder)}, SWT.NONE);
${item}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}

${item}.setControl(${control});</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Table" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.table" name="Table">${type:newType(org.eclipse.swt.widgets.Table)} ${table:newName(org.eclipse.swt.widgets.Table)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.SINGLE | SWT.FULL_SELECTION', 'SWT.MULTI | SWT.FULL_SELECTION', SWT.CHECK, SWT.NONE, SWT.VIRTUAL)});
${table}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${table}.setLinesVisible(${line:link(true, false)});
${table}.setHeaderVisible(${header:link(true, false)});
${imp:import(org.eclipse.swt.SWT)}${cursor}

for (int ${index} = 0; ${index} &lt; ${table}.getColumnCount(); ${index}++) {
	${table}.getColumn(${index}).pack();
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TableColumn for a Table " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tablecolumn" name="TableColumn">${type:newType(org.eclipse.swt.widgets.TableColumn)} ${column:newName(org.eclipse.swt.widgets.TableColumn)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Table)}, ${style:link(SWT.LEAD, SWT.CENTER, SWT.TRAIL)});
${column}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TableItem for a Table" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tableitem" name="TableItem">${type:newType(org.eclipse.swt.widgets.TableItem)} ${item:newName(org.eclipse.swt.widgets.TableItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Table)}, SWT.NONE);
${item}.setText(${count:link(0, 1, 2, 3, 4, 5)}, ${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="java-members" deleted="false" description="JUnit 4 test case clean up method" enabled="true" name="tearDown">@${testType:newType(org.junit.After)}
public void tearDown() {
  ${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="JUnit 4 test method" enabled="true" id="org.eclipse.jdt.ui.templates.test_junit4" name="test">@${testType:newType(org.junit.Test)}
public void test${Name}() {
	${cursor} 
}</template><template autoinsert="false" context="java-members" deleted="false" description="test factory method (JUnit Jupiter)" enabled="true" id="org.eclipse.jdt.ui.templates.testfactory_junit5" name="test_factory">@${testfactoryType:newType(org.junit.jupiter.api.TestFactory)}
${returnType:link('DynamicNode', 'Stream&lt;DynamicNode&gt;', 'Collection&lt;DynamicNode&gt;', 'Iterable&lt;DynamicNode&gt;', 'Iterator&lt;DynamicNode&gt;', 'DynamicNode[]')} ${testFactoryName}() throws Exception {
	// ${todo}: generate dynamic test cases
	${cursor}return null;${typeImports:import('org.junit.jupiter.api.DynamicNode')}${staticImports:importStatic('org.junit.jupiter.api.Assertions.*', 'org.junit.jupiter.api.DynamicContainer.*', 'org.junit.jupiter.api.DynamicTest.*')}
}</template><template autoinsert="false" context="java-members" deleted="false" description="test method (JUnit 5)" enabled="true" id="org.eclipse.jdt.ui.templates.test_junit5" name="test_jupiter">@${testType:newType(org.junit.jupiter.api.Test)}
void ${testName}() throws Exception {
	${staticImport:importStatic('org.junit.jupiter.api.Assertions.*')}${cursor}
}</template><template autoinsert="false" context="java-members" deleted="false" description="test method (JUnit 3)" enabled="true" id="org.eclipse.jdt.ui.templates.test" name="test3">public void test${name}() throws Exception {
	${cursor}
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Text" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.text" name="Text">${type:newType(org.eclipse.swt.widgets.Text)} ${text:newName(org.eclipse.swt.widgets.Text)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.SINGLE | SWT.LEAD | SWT.BORDER', 'SWT.SINGLE | SWT.LEAD | SWT.READ_ONLY | SWT.BORDER', 'SWT.SINGLE | SWT.LEAD | SWT.PASSWORD | SWT.BORDER', 'SWT.MULTI | SWT.WRAP | SWT.V_SCROLL | SWT.BORDER', 'SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER')});
${text}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(CENTER, TOP, BOTTOM, FILL)}, ${hex:link(true, false)}, ${vex:link(false, true)}));
${text}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="postfix" deleted="false" description="Throws the given Exception" enabled="true" id="org.eclipse.jdt.postfixcompletion.throw" name="throw">throw ${true:inner_expression(java.lang.Throwable)};</template><template autoinsert="false" context="java" deleted="false" description="convert collection to array" enabled="true" id="org.eclipse.jdt.ui.templates.toarray" name="toarray">(${type:elemType(collection)}[]) ${collection}.toArray(new ${type}[${collection}.size()])</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ToolBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.toolbar" name="ToolBar">${type:newType(org.eclipse.swt.widgets.ToolBar)} ${bar:newName(org.eclipse.swt.widgets.ToolBar)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link(SWT.FLAT, SWT.WRAP, SWT.RIGHT, SWT.HORIZONTAL, SWT.VERTICAL, SWT.SHADOW_OUT)});
${bar}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new ToolItem for a ToolBar" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.toolitem" name="ToolItem">${type:newType(org.eclipse.swt.widgets.ToolItem)} ${item:newName(org.eclipse.swt.widgets.ToolItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.ToolBar)}, ${style:link(SWT.PUSH, SWT.CHECK, SWT.RADIO, SWT.SEPARATOR, SWT.DROP_DOWN)});
${item}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new Tree" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.tree" name="Tree">${type:newType(org.eclipse.swt.widgets.Tree)} ${tree:newName(org.eclipse.swt.widgets.Tree)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Composite)}, ${style:link('SWT.SINGLE | SWT.FULL_SELECTION', 'SWT.MULTI | SWT.FULL_SELECTION', SWT.CHECK, SWT.NONE, SWT.VIRTUAL)});
${tree}.setLayoutData(new ${gridDataType:newType(org.eclipse.swt.layout.GridData)}(SWT.${horizontal:link(FILL, BEGINNING, CENTER, END)}, SWT.${vertical:link(FILL, TOP, CENTER, BOTTOM)}, ${hex:link(true, false)}, ${vex:link(true, false)}));
${tree}.setLinesVisible(${line:link(true, false)});
${tree}.setHeaderVisible(${header:link(true, false)});
${imp:import(org.eclipse.swt.SWT)}${cursor}

for (int ${index} = 0; ${index} &lt; ${tree}.getColumnCount(); ${index}++) {
	${tree}.getColumn(${index}).pack();
}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TreeColumn for a Tree " enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.treecolumn" name="TreeColumn">${type:newType(org.eclipse.swt.widgets.TreeColumn)} ${column:newName(org.eclipse.swt.widgets.TreeColumn)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Tree)}, ${style:link(SWT.LEAD, SWT.CENTER, SWT.TRAIL)});
${column}.setText(${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="false" context="swt-statements" deleted="false" description="new TreeItem for a Tree" enabled="true" id="org.eclipse.jdt.ui.text.codetemplates.swt.treeitem" name="TreeItem">${type:newType(org.eclipse.swt.widgets.TreeItem)} ${item:newName(org.eclipse.swt.widgets.TreeItem)}= new ${type}(${parent:var(org.eclipse.swt.widgets.Tree, org.eclipse.swt.widgets.TreeItem)}, SWT.NONE);
${item}.setText(${count:link(0, 1, 2, 3, 4, 5)}, ${word_selection}${});
${imp:import(org.eclipse.swt.SWT)}${cursor}</template><template autoinsert="true" context="javadoc" deleted="false" description="&lt;code&gt;true&lt;/code&gt;" enabled="true" id="org.eclipse.jdt.ui.templates.code_tag_true" name="true">&lt;code&gt;true&lt;/code&gt;</template><template autoinsert="false" context="java-statements" deleted="false" description="try catch block" enabled="true" id="org.eclipse.jdt.ui.templates.try" name="try_catch">try {
	${line_selection}${cursor}
} catch (${Exception} ${exception_variable_name}) {
	// ${todo}: handle exception
}</template><template autoinsert="false" context="java-statements" deleted="false" description="try finally block" enabled="true" id="org.eclipse.jdt.ui.templates.tryfinally" name="try_finally">try {
	${line_selection}${cursor}
} finally {
	// ${todo}: handle finally clause
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a new variable" enabled="true" id="org.eclipse.jdt.postfixcompletion.var" name="var">${field:newType(inner_expression)} ${var:newName(inner_expression)} = ${inner_expression};${cursor}</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito when(mock.call()).thenAnswer(answer) construct" enabled="true" name="whenThenAnswer">${a:importStatic(org.mockito.Mockito.when)}${b:import(org.mockito.stubbing.Answer, org.mockito.invocation.InvocationOnMock, java.lang.Throwable)}when( ${mock}.${call} ).thenAnswer( new Answer&lt;${T}&gt;() {&#13;
	public ${T} answer( InvocationOnMock invocation ) throws Throwable {&#13;
		${cursor}&#13;
		return null;&#13;
	}&#13;
} );</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito when(mock.call()).thenAnswer(answer) construct that manipulates invocation argument" enabled="true" name="whenThenAnswerOnArgument">${a:importStatic(org.mockito.Mockito.when)}${b:import(org.mockito.stubbing.Answer, org.mockito.invocation.InvocationOnMock, java.lang.Throwable)}when( ${mock}.${call} ).thenAnswer( new Answer&lt;${T}&gt;() {&#13;
	public ${T} answer( InvocationOnMock invocation ) throws Throwable {&#13;
		${ArgType} ${argument} = ( ${ArgType} )invocation.getArguments()[ ${i} ];&#13;
		${cursor}&#13;
		return null;&#13;
	}&#13;
} );</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito when(mock.call()).thenReturn(value) construct" enabled="true" name="whenThenReturn">${:importStatic(org.mockito.Mockito.when)}when( ${mock}.${call} ).thenReturn( ${value} );</template><template autoinsert="false" context="java-statements" deleted="false" description="Mockito when(mock.call()).thenThrow(throwable) construct" enabled="true" name="whenThenThrow">${:importStatic(org.mockito.Mockito.when)}when( ${mock}.${call} ).thenThrow( ${throwable} );</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate with enumeration" enabled="true" id="org.eclipse.jdt.ui.templates.while_enumeration" name="while">while (${en:var(java.util.Enumeration)}.hasMoreElements()) {
	${type:argType(en)} ${elem:newName(type)} = (${type}) ${en}.nextElement();
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="iterate with iterator" enabled="true" id="org.eclipse.jdt.ui.templates.while_iterator" name="while">while (${it:var(java.util.Iterator)}.hasNext()) {
	${type:argType(it)} ${elem:newName(type)} = (${type}) ${it}.next();
	${cursor}
}</template><template autoinsert="false" context="java-statements" deleted="false" description="while loop with condition" enabled="true" id="org.eclipse.jdt.ui.templates.while_condition" name="while">while (${condition:var(boolean)}) {
	${line_selection}${cursor}
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates a while loop" enabled="true" id="org.eclipse.jdt.postfixcompletion.while" name="while">while (${i:inner_expression(boolean)}) {&#13;
	${cursor}&#13;
}</template><template autoinsert="true" context="postfix" deleted="false" description="Creates an if statement which checks if a given numeric variable is within a region" enabled="true" id="org.eclipse.jdt.postfixcompletion.withinregion" name="withinregion">if (${i:inner_expression(float,int,double,long)} &gt;= ${lower_bound} &amp;&amp; ${inner_expression} &lt;= ${upper_bound}) {&#13;
	${cursor}&#13;
}</template></templates>